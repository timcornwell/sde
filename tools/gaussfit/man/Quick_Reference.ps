%!PS-Adobe-3.0
%%Title: (Quick Reference)
%%Creator: (Microsoft Word: LaserWriter 8 8.1.1)
%%CreationDate: (2:56 PM Thursday, January 13, 1994)
%%For: (Malmaison)
%%Pages: 9
%%DocumentFonts: Times-Roman Symbol Times-Bold Courier-Bold Courier Courier-Oblique
%%DocumentNeededFonts: Times-Roman Symbol Times-Bold Courier-Bold Courier Courier-Oblique
%%DocumentSuppliedFonts:
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Orientation: Portrait
%ADO_PaperArea: -31 -30 761 582
%ADO_ImageableArea: 0 0 730 552
%%EndComments
/md 160 dict def md begin
/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: adobe_psp_basic
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 81 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: adobe_psp_colorspace_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/G/setgray ld
/:F/setrgbcolor ld
%%EndFile
%%BeginFile: adobe_psp_basic_text
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
level2 not endnoload
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff def
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff def
}bd
/scf
{
scalefont def
}bd
/scf-non
{
$m scale :mf setfont
}bd
/ps Z
/fz{/ps xs}bd
/sf/setfont ld
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
def
}def
%%EndFile
%%BeginFile: adobe_psp_derived_styles
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/wi
version(23.0)eq
{
{
gS 0 0 0 0 rC stringwidth gR
}bind
}{
/stringwidth load
}ifelse
def
/$o 1. def
/gl{$o G}bd
/ms{:M S}bd
/condensedmtx[.82 0 0 1 0 0]def
/:mc
{
condensedmtx :mf def
}bd
/extendedmtx[1.18 0 0 1 0 0]def
/:me
{
extendedmtx :mf def
}bd
/basefont Z
/basefonto Z
/dxa Z
/dxb Z
/dxc Z
/dxd Z
/dsdx2 Z
/bfproc Z
/:fbase
{
dup/FontType get 0 eq{
dup length dict begin
dup{1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse}forall
/FDepVector exch/FDepVector get[exch/:fbase load forall]def
}/bfproc load ifelse
/customfont currentdict end definefont
}bd
/:mo
{
/bfproc{
dup dup length 2 add dict
begin
{
1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse
}forall
/PaintType 2 def
/StrokeWidth .012 0 FontMatrix idtransform pop def
/customfont currentdict
end
definefont
8 dict begin
/basefonto xdf
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
basefont setfont
( )dup 0 4 -1 roll put
dup wi
setcharwidth
0 0 :M
gS
gl
dup show
gR
basefonto setfont
show
end
}def
}store :fbase
}bd
/:mso
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxa 1 ps div def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
1 index 0 ne
{
exch dxa add exch
}if
setcharwidth
dup 0 0 ms
dup dxa 0 ms
dup dxa dxa ms
dup 0 dxa ms
gl
dxa 2. div dup ms
end
end
}def
}store :fbase
}bd
/:ms
{
/bfproc{
dup dup length 2 add dict
begin
{
1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse
}forall
/PaintType 2 def
/StrokeWidth .012 0 FontMatrix idtransform pop def
/customfont currentdict
end
definefont
8 dict begin
/basefonto xdf
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxb .05 def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
exch dup 0 ne
{
dxb add
}if
exch setcharwidth
dup dxb .01 add 0 ms
0 dxb :T
gS
gl
dup 0 0 ms
gR
basefonto setfont
0 0 ms
end
end
}def
}store :fbase
}bd
/:mss
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxc 1 ps div def
/dsdx2 .05 dxc 2 div add def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
exch dup 0 ne
{
dsdx2 add
}if
exch setcharwidth
dup dsdx2 .01 add 0 ms
0 .05 dxc 2 div sub :T
dup 0 0 ms
dup dxc 0 ms
dup dxc dxc ms
dup 0 dxc ms
gl
dxc 2 div dup ms
end
end
}def
}store :fbase
}bd
/:msb
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxd .03 def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
1 index 0 ne
{
exch dxd add exch
}if
setcharwidth
dup 0 0 ms
dup dxd 0 ms
dup dxd dxd ms
0 dxd ms
end
end
}def
}store :fbase
}bd
/italicmtx[1 0 -.212557 1 0 0]def
/:mi
{
italicmtx :mf def
}bd
/:v
{
[exch dup/FontMatrix get exch
dup/FontInfo known
{
/FontInfo get
dup/UnderlinePosition known
{
dup/UnderlinePosition get
2 index 0
3 1 roll
transform
exch pop
}{
.1
}ifelse
3 1 roll
dup/UnderlineThickness known
{
/UnderlineThickness get
exch 0 3 1 roll
transform
exch pop
abs
}{
pop pop .067
}ifelse
}{
pop pop .1 .067
}ifelse
]
}bd
/$t Z
/$p Z
/$s Z
/:p
{
aload pop
2 index mul/$t xs
1 index mul/$p xs
.012 mul/$s xs
}bd
/:m
{gS
0 $p rm
$t lw
0 rl stroke
gR
}bd
/:n
{
gS
0 $p rm
$t lw
0 rl
gS
gl
stroke
gR
strokepath
$s lw
/setstrokeadjust where{pop
currentstrokeadjust true setstrokeadjust stroke setstrokeadjust
}{
stroke
}ifelse
gR
}bd
/:o
{gS
0 $p rm
$t 2 div dup rm
$t lw
dup 0 rl
stroke
gR
:n
}bd
%%EndFile
/currentpacking where {pop sc_oldpacking setpacking}if
end		% md
%%EndProlog
%%BeginSetup
md begin
countdictstack
[
{%stopped
%%BeginFeature: *ManualFeed False
level2 {1 dict dup /ManualFeed false put setpagedevice}{statusdict begin /manualfeed false store end} ifelse
%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *InputSlot Upper

%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *PageRegion LetterSmall
level2 {
		2 dict dup /PageSize [612 792] put dup /ImagingBBox null put setpagedevice
	}{
		/lettersmall where {pop lettersmall} {letterR} ifelse
	} ifelse
%%EndFeature
}featurecleanup
(Malmaison)setjob
/pT[1 0 0 -1 30 761]def/mT[1 0 0 -1 30 761]def
/sD 16 dict def
300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
%%IncludeFont: Times-Roman
%%IncludeFont: Symbol
%%IncludeFont: Times-Bold
%%IncludeFont: Courier-Bold
%%IncludeFont: Courier
%%IncludeFont: Courier-Oblique
/f0_1/Times-Roman :mre
/f0_12 f0_1 12 scf
/f1_1/Symbol :bsr
240/apple pd
:esr /f1_12 f1_1 12 scf
/f2_1/Times-Bold :mre
/f2_12 f2_1 12 scf
/f3_1 f1_1 def
/f3_12 f3_1 12 scf
/f4_1/Courier-Bold :mre
/f4_12 f4_1 12 scf
/f5_1/Courier :mre
/f5_12 f5_1 12 scf
/f7_1/Courier-Oblique :mre
/f7_12 f7_1 12 scf
/Courier findfont[10 0 0 -10 0 0]:mf setfont
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
initializepage
(Malmaison; page: 1 of 9)setjob
%%EndPageSetup
gS 0 0 552 730 rC
96 26 :M
f0_12 sf
(49)S
376 26 :M
-.03(GaussFit User\325s Manual)A
60 74 :M
f2_12 sf
3(8.)A
96 74 :M
3.113 .311(GaussFit Quick Reference)J
78 98 :M
2(8.1.)A
132 98 :M
.425(Introduction)A
78 122 :M
f0_12 sf
-.094(This appendix is intended solely to provide a reference for the allowable syntax of expressions)A
78 134 :M
-.111(and statements.  Examples are given but are not meant to be definitive of all allowed syntax.)A
78 146 :M
-.119(See the relevant section in the main manual for further details.  The structure of this reference)A
78 158 :M
-.081(follows the C reference of Kernighan and Ritchie.)A
78 182 :M
f2_12 sf
2(8.2.)A
132 182 :M
4.171 .417(Lexical Conventions)J
78 206 :M
f0_12 sf
-.073(White space \(i.e. characters or space informed by the compiler\) include blanks, tabs, newlines)A
78 218 :M
-.096(\(except for tracking line numbers in errors\) and comment strings.  White space is ignored except)A
78 230 :M
-.078(for delimiting tokens.)A
78 254 :M
-.141(A variable name or numerical constant may not be separated by white space as the compiler will)A
78 266 :M
-.096(interpret this to be two separate tokens.  Operators need not be separated by white space but)A
78 278 :M
-.035(keywords and identifiers must be.  For example,)A
96 303 :M
f4_12 sf
-.008(variable)A
f5_12 sf
-.008( x = 1.234;main\(\) { x = x + 2.5; })A
429 303 :M
-.223(#is legal)A
78 326 :M
f0_12 sf
-.167(but)A
96 351 :M
f4_12 sf
.052(variable)A
f5_12 sf
.054(x=1.234;main\(\){x=x+2.5;})A
401 351 :M
-.215(#is not legal)A
78 375 :M
f0_12 sf
-.005(since the identifier \324x\325 and keyword \324)A
f4_12 sf
-.008(variable)A
f0_12 sf
-.005(\325 would be interpreted as one token)A
78 388 :M
(\324)S
f4_12 sf
.031(variable)A
f5_12 sf
(x)S
f0_12 sf
.076 .008(\325 by the compiler.  The remainder of the second example is, however,)J
78 400 :M
-.029(permissible.)A
96 424 :M
f2_12 sf
1.8(8.2.1.)A
168 424 :M
.528(Comments)A
96 449 :M
f0_12 sf
-.078(The characters \324)A
f4_12 sf
-.116(/*)A
f0_12 sf
-.078(\325 begin a comment string while the characters \324)A
f4_12 sf
-.116(*/)A
f0_12 sf
-.081(\325 terminate one.)A
96 461 :M
-.121(Comments may extend over several lines but if placed on the same line as program code)A
96 473 :M
-.117(they should be terminated before the newline so as to avoid including the code in the)A
96 485 :M
-.07(comment string.)A
96 509 :M
f2_12 sf
1.8(8.2.2.)A
168 509 :M
3.483 .348(Identifier Names)J
96 533 :M
f0_12 sf
-.094(Variable names may consist of any combination of characters, numbers and underscores)A
96 545 :M
-.121(with no limit to their length.  Identifiers may not begin with a numeric character or)A
96 557 :M
.037(underscore.)A
96 581 :M
f2_12 sf
1.8(8.2.3.)A
168 581 :M
.859(Keywords)A
96 605 :M
f0_12 sf
-.081(The following identifiers are reserved as keywords and may not be used otherwise:)A
132 630 :M
f4_12 sf
1.002(break)A
222 630 :M
.916(constant)A
312 630 :M
.916(continue)A
402 630 :M
1.069(data)A
132 642 :M
1.604(do)A
222 642 :M
1.069(else)A
312 642 :M
.962(elseif)A
402 642 :M
1.203(for)A
132 654 :M
1.604(if)A
222 654 :M
.935(include)A
312 654 :M
1.069(loop)A
402 654 :M
.882(observation)A
132 666 :M
.902(parameter)A
222 666 :M
.962(return)A
312 666 :M
1.002(until)A
402 666 :M
.916(variable)A
132 678 :M
1.002(while)A
endp
%%Page: 2 2
%%BeginPageSetup
initializepage
(Malmaison; page: 2 of 9)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
86 57 :M
f0_12 sf
(50)S
366 57 :M
-.03(GaussFit User\325s Manual)A
86 93 :M
-.079(The keywords plateparam, setparam, itemparam, and starparam are no longer supported but)A
86 105 :M
-.071(are still reserved.)A
86 129 :M
f2_12 sf
1.8(8.2.4.)A
158 129 :M
.584(Constants)A
122 153 :M
f0_12 sf
-.085(Numeric constants supported include only integer and floating point numbers.  Both)A
122 166 :M
-.072(may have a unary \324)A
f4_12 sf
-.102(+)A
f5_12 sf
-.102(\325)A
f0_12 sf
-.056( or \324)A
f4_12 sf
-.102(-\325)A
f0_12 sf
-.071( sign attached and floating point numbers may be)A
122 179 :M
-.117(written in exponential notation with the)A
f5_12 sf
-.178( e )A
f0_12 sf
-.123(or)A
f5_12 sf
-.178( d )A
f0_12 sf
-.121(\(upper or lower case\) character as)A
122 191 :M
-.334(in)A
122 216 :M
f5_12 sf
-.207(1.4563e5 \( => 145630.0\).)A
86 239 :M
f2_12 sf
1.8(8.2.5.)A
158 239 :M
.487(Declarations)A
86 263 :M
f0_12 sf
-.093(The syntax for a declaration is as follows:)A
104 288 :M
f5_12 sf
-.218(declarator:)A
122 300 :M
-.22(identifier)A
122 312 :M
-.205(identifier = constant_expression)A
122 324 :M
-.204(identifier [ constant_expression ])A
86 348 :M
f0_12 sf
.939 .094(where declarator may be any of )J
f4_12 sf
2.436 .244(variable, parameter, constant,)J
86 361 :M
.113(data,)A
f2_12 sf
( )S
f0_12 sf
.157 .016(or )J
f4_12 sf
.113(observation)A
f5_12 sf
.113(.)A
f0_12 sf
.257 .026(  identifier is a user defined variable name which may be)J
86 373 :M
-.132(either vector or scalar valued.The line is terminated with a semicolon and identifiers may be)A
86 385 :M
-.139(separate width a comma.  Only  variables may be initialized in the declaration.)A
104 410 :M
f4_12 sf
-.02(variable)A
f5_12 sf
-.021(  pi = 3.1415926, i, dummy[5];data x;)A
104 422 :M
f4_12 sf
.587(observation)A
f5_12 sf
1.469 .147( y;)J
104 434 :M
f4_12 sf
.402(parameter)A
f5_12 sf
.964 .096( a, b;)J
86 457 :M
f2_12 sf
1.8(8.2.6.)A
158 457 :M
2.461 .246(Data Types)J
86 481 :M
f0_12 sf
-.106(The allowed data types are as follows:)A
104 506 :M
f4_12 sf
.916(constant)A
104 518 :M
1.069(data)A
104 530 :M
.882(observation)A
104 542 :M
.902(parameter)A
104 554 :M
.916(variable)A
86 578 :M
f0_12 sf
-.04(Only the type)A
f4_12 sf
-.057( variable )A
f0_12 sf
-.038(may be initialized in a declaration or set equal to an expression)A
86 590 :M
-.093(is a statement.)A
68 614 :M
f2_12 sf
2(8.3.)A
122 614 :M
2.205 .221(Arithmetic Operators)J
68 638 :M
f0_12 sf
-.118(Arithmetic operators are binary operators used to evaluate an expression involving the operator)A
68 650 :M
-.079(and an expression on the left and right side of the operator.  The result of this is another)A
68 662 :M
-.099(expression which may be used in a statement or to further evaluate an expression involving)A
68 674 :M
-.059(another operator.)A
endp
%%Page: 3 3
%%BeginPageSetup
initializepage
(Malmaison; page: 3 of 9)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 57 :M
f0_12 sf
(51)S
406 57 :M
-.03(GaussFit User\325s Manual)A
126 93 :M
f2_12 sf
1.8(8.3.1.)A
198 93 :M
2.842 .284(Multiplicative Operators)J
126 118 :M
f0_12 sf
-.061(The multiplicative operators are )A
f4_12 sf
-.092(*)A
f0_12 sf
-.059(, and)A
f4_12 sf
-.092( / )A
f0_12 sf
-.061(and group left-to-right. The usual operations are)A
126 130 :M
-.121(performed)A
144 155 :M
f5_12 sf
-.218(expression:)A
180 167 :M
-.207(expression * expression)A
180 179 :M
-.207(expression / expression)A
126 203 :M
f0_12 sf
-.082(The binary operator)A
f4_12 sf
-.118( * )A
f0_12 sf
-.078(indicates multiplication and the binary operator)A
f4_12 sf
-.118( / )A
f0_12 sf
-.087(indicates)A
126 215 :M
.041(division.)A
126 239 :M
f2_12 sf
1.8(8.3.2.)A
198 239 :M
2.727 .273(Additive Operators)J
126 264 :M
f0_12 sf
-.042(The additive operators are )A
f4_12 sf
-.063(+)A
f0_12 sf
-.041(, and)A
f4_12 sf
-.063( - )A
f0_12 sf
-.042(and group left-to-right. The usual operations are)A
126 276 :M
-.121(performed)A
144 301 :M
f5_12 sf
-.218(expression:)A
180 313 :M
-.207(expression + expression)A
180 325 :M
-.207(expression - expression)A
126 349 :M
f0_12 sf
-.057(The binary operator)A
f4_12 sf
-.082( + )A
f0_12 sf
-.054(indicates addition and the binary operator)A
f4_12 sf
-.082( - )A
f0_12 sf
-.055(indicates subtraction.)A
126 373 :M
f2_12 sf
1.8(8.3.3.)A
198 373 :M
2.929 .293(Unary operators)J
126 398 :M
f0_12 sf
-.034(The unary operators are)A
f4_12 sf
-.049( +)A
f0_12 sf
-.032(, and)A
f4_12 sf
-.049( - )A
f0_12 sf
-.034(and may only be used with identifiers and numeric)A
126 411 :M
-.062(constants.  The operator)A
f4_12 sf
-.093( ^ )A
f0_12 sf
-.061(is used to signify exponentiation of an identifier or numeric)A
126 423 :M
-.105(constant to an integer value or integer valued constant. The syntax is)A
144 448 :M
f5_12 sf
-.211(unary_expression:)A
180 460 :M
-.218(+identifier)A
180 472 :M
-.211(+numeric_constant)A
180 484 :M
-.218(-identifier)A
180 496 :M
-.211(-numeric_constant)A
180 508 :M
-.207(identifier^integer_value)A
180 520 :M
-.205(numeric_constant^integer_value)A
126 543 :M
f0_12 sf
-.092(White space may separate the unary expressions from their arguments.)A
126 567 :M
f2_12 sf
1.8(8.3.4.)A
198 567 :M
2.153 .215(Precedence and Order of Evaluation)J
126 591 :M
f0_12 sf
-.105(The precedence for the arithmetic operators is the same as in FORTRAN.  Namely,)A
126 604 :M
-.06(exponentiation \()A
f4_12 sf
-.088(^)A
f0_12 sf
-.053(\) first, multiplication\()A
f4_12 sf
-.088(*)A
f0_12 sf
-.056(\) and division \()A
f4_12 sf
-.088(/)A
f0_12 sf
-.054(\) next, and lastly addition \()A
f4_12 sf
-.088(+)A
f0_12 sf
-.074(\) and)A
126 617 :M
-.074(subtraction \()A
f4_12 sf
-.116(-)A
f0_12 sf
-.076(\) evaluated from left to right.  Grouping by parentheses will override this)A
126 629 :M
-.099(order as the enclosed expressions will be evaluated first and the result will then used in the)A
126 641 :M
.069(expression.)A
126 665 :M
f2_12 sf
1.8(8.3.5.)A
198 665 :M
2.655 .266(Relational Operators)J
126 689 :M
f0_12 sf
-.083(Relational operators also follow C syntax and are as follows)A
endp
%%Page: 4 4
%%BeginPageSetup
initializepage
(Malmaison; page: 4 of 9)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
86 57 :M
f0_12 sf
(52)S
366 57 :M
-.03(GaussFit User\325s Manual)A
104 94 :M
f5_12 sf
-.208(relational_expression:)A
140 106 :M
-.207(expression <  expression)A
140 118 :M
-.207(expression >  expression)A
140 130 :M
-.207(expression <= expression)A
140 142 :M
-.207(expression >= expression)A
86 165 :M
f0_12 sf
-.107(The operators will return zero if the specified relation is false and one if it is true.  They have)A
86 178 :M
.02 .002(the same meaning as in C: )J
f4_12 sf
(< )S
f0_12 sf
.029 .003(means less than,)J
f4_12 sf
( > )S
f0_12 sf
.026 .003(means greater than, )J
f4_12 sf
(<= )S
f0_12 sf
.036 .004(means less)J
86 191 :M
-.046(than or equal to, and )A
f4_12 sf
-.072(>=)A
f0_12 sf
-.049(means greater than or equal to.)A
86 215 :M
f2_12 sf
1.8(8.3.6.)A
158 215 :M
2.83 .283(Logical Operators)J
86 239 :M
f0_12 sf
-.075(Logical operators also follow C syntax and are as follows)A
104 264 :M
f5_12 sf
-.209(logical_expression:)A
140 276 :M
-.207(expression && expression)A
140 288 :M
-.207(expression || expression)A
86 312 :M
f0_12 sf
-.051(where the operators)A
f4_12 sf
-.074( &&)A
f0_12 sf
-.048( \(logical and\) and)A
f4_12 sf
-.074( || )A
f0_12 sf
-.046(\(logical or\) will return zero if the relation is)A
86 324 :M
-.097(false and one if it is true.  The expresion will evaluate left-to-right.)A
86 348 :M
f2_12 sf
1.8(8.3.7.)A
158 348 :M
2.352 .235(Equality Operators)J
86 372 :M
f0_12 sf
-.079(Equality operators also follow C syntax and are as follows:)A
104 397 :M
f5_12 sf
-.209(equality_expression:)A
140 409 :M
-.207(expression == expression)A
140 421 :M
-.207(expression != expression)A
86 445 :M
f0_12 sf
-.043(The equality operators)A
f4_12 sf
-.063( == )A
f0_12 sf
-.043(\(equal\) and)A
f4_12 sf
-.063( != )A
f0_12 sf
-.044(\(not equal\) have lower precedence that the)A
86 458 :M
-.074(relational operators and so the statement \(e.g.\))A
f5_12 sf
-.115( a)A
f4_12 sf
-.115(<)A
f5_12 sf
-.115(b )A
f4_12 sf
-.115(==)A
f5_12 sf
-.115( b)A
f4_12 sf
-.115(<)A
f5_12 sf
-.115(c )A
f0_12 sf
-.076(will evaluate the relations)A
86 471 :M
-.14(between )A
f5_12 sf
-.188(a, b, )A
f0_12 sf
-.127(and c before evaluating the equality condition.)A
86 495 :M
f2_12 sf
1.8(8.3.8.)A
158 495 :M
3.231 .323(Assignment Operators)J
86 519 :M
f0_12 sf
-.129(The form of an assignment statement is similar to that in C:)A
104 544 :M
f5_12 sf
-.206(<variable> = <expression>;)A
86 568 :M
f0_12 sf
-.146(where)A
f5_12 sf
-.179( <variable> )A
f0_12 sf
-.118(must be declared as in a \324variable\325 statement, and)A
f5_12 sf
-.196(<expression>)A
86 580 :M
f0_12 sf
-.094(is an arithmetic, logical, or relational expression involving the usual operators as well as)A
86 592 :M
-.048(possible function calls.  The expressions group right-to-left.)A
68 616 :M
f2_12 sf
2(8.4.)A
122 616 :M
.485(Statements)A
86 640 :M
1.8(8.4.1.)A
158 640 :M
3.9 .39(Expression Statements)J
86 664 :M
f0_12 sf
-.102(Most statements are expression statements.  They have the form)A
99 689 :M
f4_12 sf
1.604(do)A
131 701 :M
f5_12 sf
-.218(<statement>)A
99 713 :M
f4_12 sf
-.02(while)A
f5_12 sf
-.021(\(<logical expression>\);)A
endp
%%Page: 5 5
%%BeginPageSetup
initializepage
(Malmaison; page: 5 of 9)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 57 :M
f0_12 sf
(53)S
406 57 :M
-.03(GaussFit User\325s Manual)A
139 94 :M
f5_12 sf
-.397(or)A
139 118 :M
f4_12 sf
.068(loop)A
f5_12 sf
0 12 rm
.075(<statement>)A
0 -12 rm
139 142 :M
f4_12 sf
-.02(while)A
f5_12 sf
-.021(\(<logical expression>\);)A
126 165 :M
f0_12 sf
-.102(These are usually function calls or simple assignment statements.)A
126 189 :M
f2_12 sf
1.8(8.4.2.)A
198 189 :M
3.224 .322(Compound Statements)J
126 213 :M
f0_12 sf
-.122(The form of a compound statement is:)A
144 238 :M
f5_12 sf
-.209(compound_statement:)A
180 250 :M
({)S
180 262 :M
-.207(optional_statement_list)A
180 274 :M
(})S
126 297 :M
f2_12 sf
1.8(8.4.3.)A
198 297 :M
3.45 .345(Conditional Statements)J
126 321 :M
f0_12 sf
-.136(The two forms of the conditional statement are:)A
144 346 :M
f4_12 sf
-.139(if)A
f5_12 sf
-.144( \( <l_expression> \)  <statement>)A
162 358 :M
f4_12 sf
-.085(if)A
f5_12 sf
-.085( \( <l_expression> \)  <statement>  )A
f4_12 sf
-.085(else)A
f5_12 sf
-.092(  <statement>)A
126 381 :M
f0_12 sf
-.115(A logical expression is one in which any of the logical or relational operators described)A
126 393 :M
-.08(above are used to evaluate a logical expression \(i.e. an expression in which the result is)A
126 406 :M
-.103(either true or false\).)A
f5_12 sf
-.172(  <statement> )A
f0_12 sf
-.12(can be a simple expression terminated by a)A
126 418 :M
-.047(semicolon, or a compound expression enclosed in braces.)A
126 442 :M
f2_12 sf
1.8(8.4.4.)A
198 442 :M
3.496 .35(While Loops)J
126 467 :M
f0_12 sf
.231 .023(The syntax of a )J
f4_12 sf
.12(while\(\))A
f0_12 sf
.257 .026( loop is as follows:)J
144 492 :M
f4_12 sf
(while\()S
f5_12 sf
( <l_expression> )S
f4_12 sf
(\))S
f5_12 sf
( <statement>)S
126 516 :M
f0_12 sf
-.138(where )A
f5_12 sf
-.185(<l_expression> )A
f0_12 sf
-.119(can be either a logical expression returning a true/false result or)A
126 529 :M
-.137(a function call returning a true/false result and)A
f5_12 sf
-.219( <statement> )A
f0_12 sf
-.151(can be either a simple)A
126 541 :M
-.099(expression a statement block.  The logical expression is evaluated first  and if true the body)A
126 553 :M
-.071(of the loop is executed.)A
126 577 :M
f2_12 sf
1.8(8.4.5.)A
198 577 :M
3.334 .333(For Loops)J
126 602 :M
f0_12 sf
.12 .012(The syntax of the )J
f4_12 sf
.058(for\(\))A
f0_12 sf
.124 .012( loop is as follows:)J
144 627 :M
f4_12 sf
-.104(for)A
f5_12 sf
-.104( )A
f4_12 sf
-.104(\()A
f5_12 sf
-.104( <initialize>; <test>; <increment> )A
f4_12 sf
-.104(\))A
f5_12 sf
-.113( <statement>)A
126 651 :M
f0_12 sf
-.186(where)A
f5_12 sf
-.229( <initialize> )A
f0_12 sf
-.153(in a non-terminated assignment statement that initializes a)A
126 664 :M
-.114(counting variable,)A
f5_12 sf
-.171( <test> )A
f0_12 sf
-.111(is a logical expression which tests the value of the variable)A
126 676 :M
-.138(against a specified limit,wand increment is either a null statement or an assignment statement)A
126 689 :M
-.126(which either decrements or increments the counting variable. A null )A
f5_12 sf
-.187(<initialize> )A
f0_12 sf
-.225(and)A
126 702 :M
f5_12 sf
-.135(<increment> )A
f0_12 sf
-.089(expression is allowed for this statement.  The)A
f5_12 sf
-.135( <test> )A
f0_12 sf
-.108(expression may)A
126 714 :M
-.099(also be a function call.)A
endp
%%Page: 6 6
%%BeginPageSetup
initializepage
(Malmaison; page: 6 of 9)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
86 57 :M
f0_12 sf
(54)S
366 57 :M
-.03(GaussFit User\325s Manual)A
86 93 :M
-.129(This statement is the same as)A
104 118 :M
f5_12 sf
-.215(<initialize>;)A
122 130 :M
f4_12 sf
.096(while)A
f5_12 sf
.281 .028(\( <test>\)  {)J
140 142 :M
-.218(<statement>)A
140 154 :M
-.216(<increment>;)A
122 166 :M
(})S
86 189 :M
f2_12 sf
1.8(8.4.6.)A
158 189 :M
4.403 .44(Do/Loop-While Loops)J
86 214 :M
f0_12 sf
.541 .054(The syntax for the )J
f4_12 sf
.254(do/loop-while)A
f0_12 sf
.548 .055(\(\) loop is:)J
104 239 :M
f4_12 sf
1.604(do)A
338 239 :M
1.069(loop)A
131 251 :M
f5_12 sf
-.218(<statement>)A
275 251 :M
-.397(or)A
374 251 :M
-.218(<statement>)A
104 263 :M
f4_12 sf
.04(while)A
f5_12 sf
.043(\(<l_expression>\))A
338 263 :M
f4_12 sf
.04(while)A
f5_12 sf
.043(\(<l_expression>\))A
86 311 :M
f0_12 sf
-.114(where)A
f5_12 sf
-.14( <statement> )A
f0_12 sf
-.096( is either a simple statement or a compound\312statement and)A
86 324 :M
f5_12 sf
-.191(<l_expression> )A
f0_12 sf
-.121(is a relational/logical expression  or function call the result of which is)A
86 336 :M
-.129(either true or false.This loop will evaluate at least once since the test condition is at the)A
86 349 :M
.148 .015(bottom of the loop.  The )J
f4_12 sf
.076(do)A
f0_12 sf
(/)S
f4_12 sf
.076(loop-while)A
f0_12 sf
.214 .021(\(\) expression will continue while the)J
86 362 :M
f5_12 sf
-.145(<logical expression>)A
f0_12 sf
-.09( is true.)A
86 386 :M
f2_12 sf
1.8(8.4.7.)A
158 386 :M
4.642 .464(Do/Loop-Until Loops)J
86 411 :M
f0_12 sf
.474 .047(The syntax for the )J
f4_12 sf
.222(do)A
f0_12 sf
.103(/)A
f4_12 sf
.222(loop-until)A
f0_12 sf
.48 .048(\(\) loop is:)J
104 436 :M
f4_12 sf
1.604(do)A
131 448 :M
f5_12 sf
-.218(<statement>)A
104 460 :M
f4_12 sf
.04(until)A
f5_12 sf
.043(\(<l_expression>\))A
104 484 :M
-.397(or)A
104 508 :M
f4_12 sf
1.069(loop)A
131 520 :M
f5_12 sf
-.218(<statement>)A
104 532 :M
f4_12 sf
.04(until)A
f5_12 sf
.043(\(<l_expression>\))A
86 556 :M
f0_12 sf
-.158(where)A
f5_12 sf
-.194( <statement> )A
f0_12 sf
-.134( is either a simple statement or a compound statement and)A
86 569 :M
f5_12 sf
-.191(<l_expression> )A
f0_12 sf
-.121(is a relational/logical expression  or function call the result of which is)A
86 581 :M
-.126(either true or false. This loop will evaluate at least once since the test condition  is at the)A
86 594 :M
.191 .019(bottom of the loop.  The )J
f4_12 sf
.098(do)A
f0_12 sf
(/)S
f4_12 sf
.098(loop-until\(\))A
f0_12 sf
.237 .024( expression  will continue until the)J
86 607 :M
f5_12 sf
-.075(<l_expression>)A
f0_12 sf
-.043( is true \(i.e. as long  as it is false\).)A
86 631 :M
f2_12 sf
1.8(8.4.8.)A
158 631 :M
2.377 .238(Break Statement)J
86 656 :M
f0_12 sf
-.04(The)A
f4_12 sf
-.046( break )A
f0_12 sf
-.031(statement is used to terminate a loop prematurely.Control passes to the)A
86 668 :M
-.152(statement immediately following the  terminated loop.)A
endp
%%Page: 7 7
%%BeginPageSetup
initializepage
(Malmaison; page: 7 of 9)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 57 :M
f0_12 sf
(55)S
406 57 :M
-.03(GaussFit User\325s Manual)A
126 93 :M
f2_12 sf
1.8(8.4.9.)A
198 93 :M
2.153 .215(Return Statement)J
126 118 :M
f0_12 sf
-.032(A function will generally return to it\325s caller by the use of the)A
f4_12 sf
-.051( return )A
f0_12 sf
-.034(statement.  It has)A
126 130 :M
-.035(two forms:)A
144 155 :M
f4_12 sf
.677(return)A
f5_12 sf
.615 .062( )J
f4_12 sf
(;)S
144 167 :M
.135(return)A
f5_12 sf
.556 .056( <expression> )J
f4_12 sf
(;)S
126 190 :M
f0_12 sf
-.119(In the first case the returned value is not defined by the statement itself but will be zero by)A
126 202 :M
-.111(default \(zero is the default return value even if the statement is not present in a function\).  In)A
126 214 :M
-.099(the second case the value of the expression is returned to the caller.)A
126 238 :M
f2_12 sf
1.667(8.4.10.)A
198 238 :M
2.833 .283(Include Statement)J
126 262 :M
f0_12 sf
-.22(The statement)A
144 287 :M
f5_12 sf
-.209(#include  "filename")A
126 311 :M
f0_12 sf
-.126(will cause the compiler to read in the contents of )A
f5_12 sf
-.196(filename)A
f0_12 sf
-.125( until an end of file condition is)A
126 324 :M
.12 .012(reached, after which processing continues with the previous file. )J
f4_12 sf
.049(#include)A
126 336 :M
f0_12 sf
-.128(statements may be nested up to ten levels and may contain their own global declarations but)A
126 348 :M
-.093(these declarations must not overlap.)A
126 372 :M
f2_12 sf
1.667(8.4.11.)A
198 372 :M
3.057 .306(Null Statement)J
126 396 :M
f0_12 sf
-.143(The null statement has the form)A
162 421 :M
f4_12 sf
(;)S
126 444 :M
f0_12 sf
-.072(Its only practical use is to provide a null body for a loop.)A
endp
%%Page: 8 8
%%BeginPageSetup
initializepage
(Malmaison; page: 8 of 9)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
86 57 :M
f0_12 sf
(56)S
366 57 :M
-.03(GaussFit User\325s Manual)A
86 93 :M
f2_12 sf
1.667(8.4.12.)A
158 93 :M
2.42 .242(Functions and Model Structure)J
86 117 :M
f0_12 sf
-.127(The structure of a model file is similar to that of a normal C program:)A
104 142 :M
f5_12 sf
-.21(<opt_declarations>)A
104 154 :M
-.21(<opt_declarations>)A
104 178 :M
-.238(main\(\))A
104 190 :M
({)S
122 202 :M
-.207(<opt_local declarations>)A
122 226 :M
-.212(<opt_statement>)A
122 238 :M
-.212(<opt_statement>)A
104 250 :M
(})S
104 274 :M
-.21(<opt_declarations>)A
104 298 :M
-.227(userfn\(\))A
104 310 :M
({)S
104 322 :M
-.207(<opt_local declarations>)A
104 334 :M
-.212(<opt_statement>)A
122 346 :M
-.21(return <opt_value>)A
104 358 :M
(})S
86 382 :M
f0_12 sf
-.076(Every model in GaussFit must define at least one function, )A
f5_12 sf
-.114(main\(\),)A
f0_12 sf
-.074( just as in C.  The)A
86 395 :M
-.107(function )A
f5_12 sf
-.162(main\(\))A
f0_12 sf
-.1( will be the first one executed.  If there is no function )A
f5_12 sf
-.162(main\(\))A
f0_12 sf
-.118( a run-time)A
86 407 :M
-.037(error will result.)A
86 431 :M
f2_12 sf
1.667(8.4.13.)A
158 431 :M
3.505 .35(User Defined Functions)J
86 455 :M
f0_12 sf
-.11(The syntax for defining a function is similar to that of a C function:)A
104 480 :M
f5_12 sf
-.206(<fname> \( <argument list> \))A
104 492 :M
({)S
122 504 :M
-.205(<optional local declarations>)A
122 528 :M
-.218(<statement>)A
122 552 :M
-.205(return  <value to be returned>;)A
104 564 :M
(})S
86 588 :M
f0_12 sf
-.151(where)A
f5_12 sf
-.186( <fname> )A
f0_12 sf
-.122(is the function name, )A
f5_12 sf
-.186(<argument list> )A
f0_12 sf
-.128(is a comma delimited list of)A
86 601 :M
-.109(variables that were passed to the function from the calling routine, )A
f5_12 sf
-.168(<statement> )A
f0_12 sf
-.202(and)A
86 614 :M
f5_12 sf
-.156(<declarations> a)A
f0_12 sf
-.107(re as we have seen them, and )A
f5_12 sf
-.156(<value to be returned>)A
f0_12 sf
-.105( is a)A
86 626 :M
-.148(variable name \(either  scalar or vector\) declared in either the argument list or local or global)A
86 638 :M
-.081(declarations.)A
endp
%%Page: 9 9
%%BeginPageSetup
initializepage
(Malmaison; page: 9 of 9)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
126 57 :M
f0_12 sf
(57)S
406 57 :M
-.03(GaussFit User\325s Manual)A
126 93 :M
f2_12 sf
1.667(8.4.14.)A
198 93 :M
4.075 .408(Built-in Functions)J
126 117 :M
f0_12 sf
-.051(GaussFit supports the following built-in functions \(which are also keywords\):)A
126 142 :M
f4_12 sf
1.203(abs)A
216 142 :M
1.069(sqrt)A
324 142 :M
1.203(sin)A
387 142 :M
1.203(cos)A
126 154 :M
1.203(tan)A
216 154 :M
1.069(asin)A
324 154 :M
1.069(acos)A
387 154 :M
1.069(atan)A
126 166 :M
1.002(log10)A
216 166 :M
.386 .039(log )J
f7_12 sf
.636 .064(\(base e\))J
324 166 :M
f4_12 sf
1.203(exp)A
387 166 :M
.869(triangularize)A
126 178 :M
.962(import)A
216 178 :M
.962(export)A
387 178 :M
.855(exportconstraint)A
endp
%%Trailer
end		% md
%%EOF
