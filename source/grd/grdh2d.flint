# 1 "/sparc2/sde/source/grd/grdh2d.f" 
C
C	National Radio Astronomy Observatory, Socorro, NM 87801
C	Software Development Environment (SDE)
C++
C @(#)grdh2d.f	1.3    11/7/90
C
      SUBROUTINE GRDH2D (VIS, WT, U, V, W, NVIS, USCALE, UOFFSET,
     1   VSCALE, VOFFSET, UORIGIN, VORIGIN, GVIS, PSF, NU, NV,
     2   GRIDFNU, SUPPU, OSAMPU, GRIDFNV, SUPPV, OSAMPV, SHIFT, SUMWT)
C
CD Grid two dimensional complex data.  This version will properly grid only
C Hermitean data. The current timing is about 400 microsec per point to
C be gridded onto a 128**2 grid on the CONVEX C-1.
C The scaling factors should be set so that USCALE*U + UOFFSET converts
C to grid cells centered at 0. This is then shifted to UORIGIN. Thus,
C for example, UOFFSET, VOFFSET should nearly always be zero, while
C UORIGIN = 1, VORIGIN = NV/2.
C   The phase center of the data can be adjusted as it is gridded using
C the shift matrix.
C
C	VIS	CMPLX(*)	input	Non-gridded data
C	WT	REAL(*)		input	Weights
C	U	REAL(*)		input	Coordinates of data
C	V	REAL(*)		input	Coordinates of data
C	W	REAL(*)		input	Coordinates of data
C	NVIS	INT		input	Number to be gridded
C	USCALE	REAL		input	Scaling factor to get to pixels
C	UOFFSET	REAL		input	Offset to get to pixels
C	VSCALE	REAL		input	Scaling factor to get to pixels
C	VOFFSET	REAL		input	Offset to get to pixels
C	UORIGIN	INT		input	Origin of u axis
C	VORIGIN	INT		input	Origin of v axis
C	GVIS	CMPLX(*)	output	Gridded data
C	PSF	LOG		input	TRUE for PSF
C	NU	INT		input	Size of gridded plane
C	NV	INT		input	Size of gridded plane
C	GRIDFNU	REAL		input	Gridding function
C	SUPPU	INT		input	Support of gridding function
C	OSAMPU	INT		input	Over-sampling factor
C	GRIDFNV	REAL		input	Gridding function
C	SUPPV	INT		input	Support of gridding function
C	OSAMPV	INT		input	Over-sampling factor
C	SHIFT	REAL		input	Shift matrix
C	SUMWT	REAL		output	Sum of weights
C Audit trail:
C	Now add UVWT on-axis
C				T.J.Cornwell	Jan 10 1989
C	Return SUMWT
C				T.J.Cornwell	Jan 27 1989
C	Changed to shift matrix
C				T.J. Cornwell	Feb 13 1989
C	Shift as we grid to ignore zero. This makes the gridding faster
C	but we lose the last few columns of data
C				T.J. Cornwell	Feb 16 1989
C      Changed to Double for SHIFT
C				T.J.Cornwell	Jan 3 1990
C
C------------------------------------------------------------------------
# 1 "/sparc2/sde/source/include/stdinc.h" 1
C
C	National Radio Astronomy Observatory, Socorro, NM 87801
C	Software Development Environment (SDE)
C	(C)opyright 1989 by Associated Universities, Inc.; all rights reserved
C
C @(#)stdinc.h	1.4    11/5/90
C
C Standard include file for all SDE subroutines. This contains the
C few global variables used in SDE routines.
C
C Audit trail:
C	Cleaned up by removing numeric variables
C					T.J. Cornwell	Feb 26 1989
C
C-----------------------------------------------------------------------
C
C All variables must be declared:
C -------------------------------
C
C Prefer to put this here so that it can be switched off if required.
C
# 24 "/sparc2/sde/source/include/stdinc.h" 


      IMPLICIT 		UNDEFINED (A-Z)

C
C Global logical variables:
C -------------------------
C
C ERROR: 		Error status T if an error has occured
C SYSDEBUG: 		Do we want to debug?
C SYSMON: 		Not used
C SYSINTRP:		Has an interrupt from the user occurred?
C SYSMSG: 		Is the message system on?
C
      LOGICAL ERROR, SYSDEBUG, SYSMON, SYSINTRP, SYSMSG
      INTEGER MSGWIDTH
      COMMON /SYSI/ ERROR, MSGWIDTH, SYSDEBUG, SYSMON,
     1   SYSINTRP, SYSMSG
C
C Global Strings:
C ---------------
C
C Program name, version string, interrupt action, log name,
C and name of system e.g. 'NRAO yucca SDE'. This latter is set
C by the startup routine to be NRAO hostname SDE. SYSPROG is
C derived from the tail of the invoking string e.g. if you type
C ~tcornwel/sde/mapper then SYSPROG = mapper
C
      CHARACTER SYSPROG*16, SYSVERS*40, SYSGVER*40, SYSINTAC*10,
     1   SDELOG*32, SYSORIG*64
      COMMON /SYSC/ SYSPROG, SYSVERS, SYSGVER, SYSINTAC, SDELOG,
     1   SYSORIG
C
C Useful buffers:
C ---------------
C
C These are for immediate use only: do not expect them to remain
C unchanged over a subroutine call (except for MSGPUT).
C
      CHARACTER*256 STRBUF
      CHARACTER*256  MESSAGE
      COMMON /STRC/ STRBUF, MESSAGE
C
C System parameters:
C ------------------
C
C Max number of array dimensions
C
      INTEGER SYSMXDIM
      PARAMETER (SYSMXDIM = 7)
C
C Max length of names
C
      INTEGER SYSMXNAM
      PARAMETER (SYSMXNAM = 64)
C
C Max number of images treated as a 'unit'
C
      INTEGER SYSMXIMG
      PARAMETER (SYSMXIMG = 32)
C
C Characters per INT
C
      INTEGER SYSCHINT
# 90 "/sparc2/sde/source/include/stdinc.h" 

      PARAMETER (SYSCHINT = 4)

C
C Memory reference common:
C ------------------------
C
C All application arrays are accessed by a reference to the appropriate
C common block. The address with respect to the common block is handled
C by the dai.c routines e.g. MEMR(DATADD('Vis/UU')) contains the first
C element of the u coordinates of the visibility data base 'Vis'.
C
      INTEGER MEMI(2)
      LOGICAL MEML(2)
      REAL MEMR(2)
      DOUBLE PRECISION MEMD(1)
      COMPLEX MEMX(1)
      CHARACTER*(SYSMXNAM) MEMC(1)
      EQUIVALENCE (MEMI(1), MEMR(1), MEMD(1), MEMX(1), MEML(1))
      COMMON /SYSMEMI/ MEMI
      COMMON /SYSMEMC/ MEMC
C
C Error reason messages:
C ----------------------
C
C These are the approved strings for use in ERRREPOR. You can use something
C else but other routines may not understand what you mean.
C
      CHARACTER*(*) ERRFATAL
      PARAMETER (ERRFATAL = 'Fatal error')
      CHARACTER*(*) ERRBDARG
      PARAMETER (ERRBDARG = 'Bad subroutine argument')
      CHARACTER*(*) ERRNOMEM
      PARAMETER (ERRNOMEM = 'No memory available')
      CHARACTER*(*) ERRNTFND
      PARAMETER (ERRNTFND = 'Requested item not found')
      CHARACTER*(*) ERRLOGIC
      PARAMETER (ERRLOGIC = 'Program logic error')
      CHARACTER*(*) ERRNOSLT
      PARAMETER (ERRNOSLT = 'No slot available')
      CHARACTER*(*) ERRWRGTP
      PARAMETER (ERRWRGTP = 'Item is of wrong type')
      CHARACTER*(*) ERRTRUNC
      PARAMETER (ERRTRUNC = 'Result truncated')
      CHARACTER*(*) ERRBADID
      PARAMETER (ERRBADID = 'Bad identifier supplied')
      CHARACTER*(*) ERRDB
      PARAMETER (ERRDB = 'Internal database error')
      CHARACTER*(*) ERRINPUT
      PARAMETER (ERRINPUT = 'Input read error')
      CHARACTER*(*) ERROUTPT
      PARAMETER (ERROUTPT = 'Output write error')
      CHARACTER*(*) ERROPEN
      PARAMETER (ERROPEN = 'File open error')
      CHARACTER*(*) ERRCLOSE
      PARAMETER (ERRCLOSE = 'File close error')
# 60 "/sparc2/sde/source/grd/grdh2d.f" 2
C
C
      INTEGER	NVIS, NU, SUPPU, OSAMPU, NV, SUPPV, OSAMPV
      INTEGER	UORIGIN, VORIGIN
      COMPLEX 	VIS(*), GVIS(NU, NV)
      LOGICAL	PSF
      REAL	WT(*)
      REAL	U(*), USCALE, UOFFSET, GRIDFNU(*)
      REAL	V(*), VSCALE, VOFFSET, GRIDFNV(*)
      REAL	W(*)
      DOUBLE PRECISION	SHIFT(3,*)
      REAL	SUMWT
C
      CHARACTER*(*)	ROUTINE
      PARAMETER	(ROUTINE = 'GRDH2D')
C
      INTEGER 	IVIS, NGRID, CFOFFSET
      INTEGER	OFFU, UGRID, UCEN, DELU, DELUI, UZERO
      INTEGER	OFFV, VGRID, VCEN, DELV, DELVI, VZERO
      REAL	UCELL, VCELL, UVWT, LSUMWT
      COMPLEX	FVIS
      REAL	TWOPI, STOR, PHASE, ULOCAL, VLOCAL, WLOCAL
      LOGICAL	DOSHIFT
C==========================================================================
      IF (ERROR) GO TO 999
C
      TWOPI = 8 * ATAN(1.0)
      STOR = TWOPI / (360.0 * 3600.0)
      CFOFFSET = (SUPPU+1)*OSAMPU + 1
C
C Is there a shift?
C
      DOSHIFT = (SHIFT(1,1).NE.1.0).OR.(SHIFT(2,2).NE.1.0).OR.
     1   (SHIFT(3,3).NE.1.0)
C
      DO 6 VGRID = 1, NV
         DO 5 UGRID = 1, NU
            GVIS(UGRID,VGRID) = 0.0
  5      CONTINUE
  6   CONTINUE
C
      NGRID = 0
C
C Start of loop elements to be gridded
C
      LSUMWT = 0.0
      SUMWT = 0.0
      DO 10 IVIS = 1, NVIS
         IF (WT(IVIS).LE.0.0) GO TO 10
         NGRID = NGRID + 1
C
C Shift to new phase center if required.
C
         IF (DOSHIFT) THEN
            ULOCAL = SHIFT(1,1) * U(IVIS) + SHIFT(2,1) * V(IVIS) +
     1         SHIFT(3,1) * W(IVIS)
            VLOCAL = SHIFT(1,2) * U(IVIS) + SHIFT(2,2) * V(IVIS) +
     1         SHIFT(3,2) * W(IVIS)
            WLOCAL = SHIFT(1,3) * U(IVIS) + SHIFT(2,3) * V(IVIS) +
     1         SHIFT(3,3) * W(IVIS)
            PHASE = TWOPI * (WLOCAL - W(IVIS))
            FVIS = VIS(IVIS) * CMPLX(COS(PHASE), -SIN(PHASE))
            UCELL = USCALE * ULOCAL + UOFFSET
            VCELL = VSCALE * VLOCAL + VOFFSET
         ELSE
            FVIS = VIS(IVIS)
            UCELL = USCALE * U(IVIS) + UOFFSET
            VCELL = VSCALE * V(IVIS) + VOFFSET
         END IF
         SUMWT = SUMWT + WT(IVIS)
         IF (UCELL.GT.0.0) THEN
            FVIS = CONJG(FVIS)
            UCELL = UCELL + FLOAT(UORIGIN)
### Warning: Variable or function float was not declared.
            VCELL = VCELL + FLOAT(VORIGIN)
         ELSE
            UCELL = - UCELL + FLOAT(UORIGIN)
            VCELL = - VCELL + FLOAT(VORIGIN)
         END IF
         IF (PSF) FVIS = 1.0
C
C Check for boundaries
C
         IF ((NINT(UCELL)+2*SUPPU).GT.NU) GO TO 10
         IF ((NINT(VCELL)+SUPPV).GT.NV) GO TO 10
         IF ((NINT(VCELL)-SUPPV).LT.1) GO TO 10
         DELUI = NINT(OSAMPU*(FLOAT(NINT(UCELL))-UCELL))
         DELVI = NINT(OSAMPV*(FLOAT(NINT(VCELL))-VCELL))
         UCEN = NINT(UCELL) - UORIGIN
         VCEN = NINT(VCELL) - VORIGIN
C
C There is no problem with running into an axis so just plunge right
C in. Remember that at this stage we shift everything over by SUPPU
C cells so that we can ignore the edge effects on the v-axis
C
         UZERO = NINT(UCELL) + SUPPU
         VZERO = NINT(VCELL)
         DO 140 OFFV = - SUPPV, SUPPV
            DELV  = DELVI + OSAMPV*OFFV + CFOFFSET
            VGRID = VZERO + OFFV
            DO 150 OFFU = - SUPPU, SUPPU
               DELU  = DELUI + OSAMPU*OFFU + CFOFFSET
               UGRID = UZERO + OFFU
               UVWT = WT(IVIS) * GRIDFNU(DELU) * GRIDFNV(DELV)
               GVIS(UGRID,VGRID) = GVIS(UGRID,VGRID) + UVWT * FVIS
               LSUMWT = LSUMWT + UVWT
 150        CONTINUE
 140     CONTINUE
C
  10  CONTINUE
C
      IF (LSUMWT.EQ.0.0) THEN
         CALL ERRREPOR (ERRBDARG, ROUTINE, 'No weight!')
         GO TO 999
      ELSE
C
C Symmetrize
C
         UZERO = UORIGIN + SUPPU
         VZERO = VORIGIN
         DO 70 OFFV = -NV/2+1, NV/2-1
            DO 60 OFFU = 1, SUPPU
               GVIS(UZERO+OFFU,VZERO+OFFV) =
     1            GVIS(UZERO+OFFU,VZERO+OFFV) +
     2            CONJG(GVIS(UZERO-OFFU,VZERO-OFFV))
  60        CONTINUE
  70     CONTINUE
         DO 80 OFFV = 0, NV/2-1
            GVIS(UZERO,VZERO+OFFV) = GVIS(UZERO,VZERO+OFFV) +
     1         CONJG(GVIS(UZERO,VZERO-OFFV))
            GVIS(UZERO,VZERO-OFFV) =
     1         CONJG(GVIS(UZERO,VZERO+OFFV))
  80     CONTINUE
C
C Shift left and normalize
C
         LSUMWT = FLOAT(NU-1)*FLOAT(NV)/LSUMWT
         DO 50 VGRID = 1, NV
            DO 40 UGRID = 1, NU-SUPPU
               GVIS(UGRID,VGRID) = LSUMWT * GVIS(UGRID+SUPPU,VGRID)
  40        CONTINUE
            DO 46 UGRID = NU-SUPPU+1, NU
               GVIS(UGRID,VGRID) = 0.0
  46        CONTINUE
  50     CONTINUE
      END IF
C
 999  CONTINUE
      END
### Warning: Variable memd was never used.
### Warning: Variable ucen may be redundant.
### Warning: Variable meml was never used.
### Warning: Variable vcen may be redundant.
### Warning: Variable memr was never used.
### Warning: Variable memx was never used.
### Warning: Variable stor may be redundant.
